#wrapper
	// Sidebar
	#sidebar-wrapper
		ul.sidebar-nav
	#page-content-wrapper
		h2#tileSelect Tile selection

		p When the app first starts up, you are asked to “initialize your design” by picking a set of tiles. Different set of tiles fit together differently and have different symmetries.

		h4#regularPoly Regular tiles

		p All of these options are made up of only regular polygons – triangles, squares, hexagons, octagons and 12-gons. Note that the canvas is pre-populated with a basic tiling, but there are many #[a(href='https://en.wikipedia.org/wiki/Euclidean_tilings_by_convex_regular_polygons') many different ways] to fit these tiles together!

		.row
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-hexagons(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label Regular hexagons
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-4_8_8(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label A 4.8.8 tiling
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-4_6_12(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label A 4.6.12 tiling

		h4#regularFiller Regular and filler tiles

		p All the options in this subsection feature regular polygons coupled with other shapes like bowties that enable the set to fully tile the plane. Here are some examples:

		.row
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-10_filler(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label 10-gons with fillers
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-8_12_filler(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label 8-gons and 12-gons with fillers
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-9_12_filler(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label 9-gons and 12-gons with fillers

		h4#almostReg Almost-regular tiles

		p These are deceptive sets of polygons that look like they shouldn't be able to tile the plane but do because they are ever so slightly skewed.

		.row
			.col-sm-6.img-with-label
				.prop6col
					.content
						.responsive-sprites
							img.icon-57tiles(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label Almost regular heptagons and pentagons
			.col-sm-6.img-with-label
				.prop6col
					.content
						div
							.responsive-sprites
								img.icon-altair(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label Altair tiling

		h4#quasiperiodic Quasiperiodic tiles

		p These tilings all have to do with 5-fold or 7-fold symmetry.

		.row
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-7fold(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label Heptagonal rhombi
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-penrose(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label Penrose kites and darts
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-girih(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label Girih tiles

		p You can learn more about these tilings by reading #[a(href='https://en.wikipedia.org/wiki/Penrose_tiling') Penrose tilings] and #[a(href='https://en.wikipedia.org/wiki/Girih_tiles') Girih tiles]. These papers by #[a(href='http://www.sciencemag.org/content/315/5815/1106') Lu and Steinhardt] and #[a(href='http://bridgesmathart.org/2012/cdrom/proceedings/148/index.html') Bonner and Pelletier] are also great references for constructing 5-fold and 7-fold designs.

		h4#customPalette Customizing your palette

		p The final option, “Custom”, defaults to a blank palette and canvas. This is convenient if you want to start from scratch and specify every single tile. Note, however that you can #[b always] customize your palette, even if you picked another option from the dropdown!

		h6 Adding a new tile

		p There are two ways to add a new tile to your palette; both are accessed via the #[i.fa.fa-plus.fa-border] Add Tile button in the toolbar.

		p The graphical editor is the simpler option. In the modal that pops up, you can pick a new shape by dragging the sliders for number of sides and side lengths. The display always defaults to a regular polygon, but you can further specify the dimensions of the polygon by dragging around individual vertices in the display with your mouse. The side lengths and angles update continuously to tell you what the new dimensions are. Add it to the palette by clicking "Add to Lineup".

		p The manual text editor is the more advanced option. You can pick a new shape by specifying the side-lengths and interior angles in degrees. Sidelengths default to all 1s if left unspecified; interior angles default to a regular polygon if left unspecified. Note that the first interior angle you specify is between the first and the second edge you specify. Sliceform Studio alerts you with an error if it is unable to parse your input or get a closed polygon from your input.

		.row
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-customTile1(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label sides = #[span.code [1,1,1,1,1,1]], angles = #[span.code [120,120,120,60,240,60]]
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-customTile2(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label sides = #[span.code [1,1,1,1,1,1]], angles = #[span.code [72,216,72,72,216,72]]
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-customTile3(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label sides = #[span.code [1.618,1,1,1.618]], angles = #[span.code [72,144,72,72]]

		h6 Deleting a tile

		p Click on the tile in the palette (it should turn blue) and click the #[i.fa.fa-trash.fa-border] Delete button in the toolbar.

		p Since the palette is effectively the template for everything in the canvas, you are not allowed to delete a tile in the palette if there are instances of that tile on the canvas.

		h6 Copying a tile

		p On occasion you might want more than one instance of a tile (so that they can be inscribed with different patterns). Click on the tile in the palette (it should turn blue) and click the #[i.fa.fa-files-o.fa-border] Copy button in the toolbar.

		h2#tileAssembly Tile assembly

		h4#canvasPop Populating the canvas

		p If you pick one of the preset options, the canvas is prepopulated with a sample tiling. You can grow it by adding more tiles from the palette.

		p Drag tiles out from the palette on the right to the main canvas (the large white area). When you release the cursor, the palette should repopulate itself.

		.row
			.img-with-label.col-sm-12
				.img-container
					img(style="height: auto", data-gifffer="/images/docs/pop-canvas.gif")

		h4#tileManip Manipulating tiles

		p You can manipulate tiles on the canvas as you might expect. Drag a tile (or group of tiles) to move them. Drag a vertex of a tile to rotate the tile (or group of tiles). Drag and scroll on the canvas to pan and zoom respectively.

		.row
			.img-with-label.col-sm-12
				.img-container
					img(style="height: auto", data-gifffer="/images/docs/interactions.gif")

		h4#joinSep Joining and separating tiles

		p There are two ways to join tiles together.

		p The first (and faster) way is to dragging an edge of one tile onto an edge of another tile. When you are dragging a tile by its edge, only the edge should be highlighted blue; not the interior of the tile. If you now drag the tiles, they should move together as a common entity.

		p The second is to click successively on the two edges you want to join together. The first tile should snap to the second tile; their common edge should turn green, indicating that they are joined together.

		p A joined edge turns red when you hover on it. Clicking on it will separate the two tiles again.

		.row
			.img-with-label.col-sm-12
				.img-container
					img(style="height: auto", data-gifffer="/images/docs/edgejoins.gif")

		p When the tiles are joined in a cluster along multiple edges, sometimes it is necessary to detach multiple edges such that the two tiles are separated. Sliceform Studio will infer the minimum number of of edges required to separate tiles along that edge.

		.row
			.col-sm-6.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-break1(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label Separating two tiles joined on multiple edges.
			.col-sm-6.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-break2(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label Breaking the minimal number of edges to separate the two tiles.

		p Note that edge joining is forbidden if the two edges have different lengths.

		h6#planar Planar tiles

		.alert.alert-info This experimental feature is still in beta. To access it, click on the “Beta Features” button below the tile screen and turn on Non-planar Tiles.

		p Under normal circumstances, Sliceform Studio will forbid you from joining two edges belonging to the same tile or to tiles in the same group. You can disable this check by turning off “Planar” in the toolbar. Now when you click on two edges in succession, the two tiles will no longer snap together, but the edges will still turn green to indicate that they are now joined.

		p This is useful for creating non-planar configurations like cylinders, polyhedra and other configurations where edges are identified in topologically interesting ways. Refer to #[a(href="/gallery.html") Rampart or Planetarium in the gallery] as examples of this.

		h4#copyDel Copy and delete

		p Select a tile or a group of joined tiles in the canvas by clicking it (they should turn blue). You can then copy your selection by clicking the #[i.fa.fa-files-o.fa-border] Copy button and delete your selection by clicking #[i.fa.fa-trash.fa-border] Delete button in the toolbar. You can also use the hotkeys #[kbd d] (for duplicate) and #[kbd(style="") Backspace] to do the same thing.

		p Copying a group of tiles can save you a lot of work when you are making a symmetric configuration of tiles.

		.row
			.img-with-label.col-sm-12
				.img-container
					img(data-gifffer="/images/docs/duppenrose.gif")
				.label-container
					label Using the copy feature to rapidly assemble a large symmetric configuration.

		h4#canvasControl Canvas control

		p The #[i.fa.fa-arrows-alt] and 1:1 buttons are useful canvas control utilities. The former (“Zoom to fit”) automatically zooms to fit everything on the canvas, while the latter (“Reset zoom level”) resets the scale and centers the contents of the canvas.

		p Note that your cursor changes from #[i.fa.fa-arrows.fa-border] (indicating the panning action) to #[i.fa.fa-arrows-v.fa-border] when you hover over the bottom edge of the canvas. When this happens, you can drag the bottom edge of the canvas to resize the display from its default height of 500px.

		h2#patternDesign Pattern design

		p Each tile in the palette has an associated #[i.fa.fa-edit.fa-border] button beside it. Click on this to bring up the pattern editor for that tile.

		h4#basicMotifs Basic motifs

		p These are common motifs in Islamic geometry which have been parametrized by sliders. “Angle” controls the contact angle between the motif and its incident edge while “Depth” controls the depth of the pattern. Sliceform Studio's implementation of these motifs is heavily based on #[a(href="http://www.cgl.uwaterloo.ca/~csk/washington/tile/papers/kaplan_bridges2000.pdf/") Craig Kaplan’s implementation of the same in the Java applet Taprats].

		.row
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-star(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label Star motif
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-rosette(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label Rosette motif
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-extended(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label Extended rosette motif

		p Note that these motifs are only applicable to regular polygonal tiles.

		h4#hankin Hankin motifs

		p The Hankin option is a convenient choice to inscribe a pattern within an irregular filler polygon that is consistent with the other tiles in the set.

		p When you specify two parameters - contact angle and edge offset - Sliceform Studio applies the Hankin inference algorithm to generate a minimal consistent pattern satisfying these two constraints.

		p For an n-sided polygon, Sliceform Studio constructs #[i 2n] rays: two for each edge at the specified angles and offsets. It then matches pairs of the rays up greedily to minimize total internal pattern length. For a more involved discussion of this algorithm, refer to #[a(href="http://www.cgl.uwaterloo.ca/~csk/papers/gi2005.html") Craig Kaplan’s paper on this technique].

		.alert.alert-warning Note that for some polygons and some values of angles and offsets a matching of all 2n rays is not possible.

		.row
			.col-sm-3.img-with-label
				.prop3col
					.content
						.responsive-sprites
							img.icon-hankinoffset1before(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label Rays emerging at offset = 0.3, angle = 70°.
			.col-sm-3.img-with-label
				.prop3col
					.content
						.responsive-sprites
							img.icon-hankinoffset1(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label Matched up rays under Hankin.
			.col-sm-6.img-with-label
				.prop6col
					.content
						.responsive-sprites
							img.icon-hankin-ex(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label The filler shape made compatible with surrounding tiles.

		h4#infer Infer

		.alert.alert-info This experimental feature is still in beta. To access it, click on the “Beta Features” button below the tile screen and turn on Pattern Inference.

		p The infer option is similar to Hankin above, just that the inference algorithm is deferred and run at a later stage. The boundary conditions are deduced from its neighbors, not from user-defined parameters. This can be very powerful since a different pattern can be generated separately for each tile on the canvas.

		p When the option is first selected, the tile is simply shaded yellow but initialized with no patterns. When there is a tile on the inferred setting in the canvas, the “Infer” button appears on the toolbar. Clicking it triggers the inference algorithm.

		.row
			.col-sm-12.img-with-label
				.prop12col
					.content
						.responsive-sprites
							img.icon-inferdemo(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label Example of patterns inferred from smoothly varying boundary conditions.

		p As with Hankin, some experimentation is needed. Sliceform Studio may not be able to construct proper patterns for certain polygons under certain boundary conditions.

		h4#customPat Custom

		p The custom option allows you to design arbitrary patterns with very high specificity. This is done by dragging around handles in the thick red line (called the #[i template]) to determine the line segments that make up the pattern.

		h6 Degrees of freedom

		p The degrees of freedom slider allows you to control the number of handles in the template. When there are 0 degrees of freedom, the pattern becomes a single line segment connecting the incoming and outgoing edge.

		.row
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-custom-deg-1(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label 1 degree of freedom
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-custom-deg-1(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label 2 degrees of freedom
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-custom-deg-1(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label 3 degrees of freedom

		h6 Edge mapping

		p When you drag around the red pattern handles, you determine a pattern template which is copied multiple times and pasted onto different edges within the same polygon. This is very useful to impose certain symmetries onto the patterns within the tile. The exact way that the template is copied and pasted is defined by an #[i edge mapping].

		p An edge mapping looks like a list of pairs of integers: #[span.code [[1,2], [4,5], [7,8]]]. In this example, the template specified by the red pattern handles enters the tile via edge 1 and leaves via edge 2. Sliceform Studio then copies and pastes two more copies of the pattern that enter from edges 4 and 7 and leave from edges 5 and 8 respectively.

		.alert.alert-info Each polygon has an implicit numbering of edges from 0 to n-1 counting clockwise. To figure out this implicit labelling, set a pattern's edge mapping to #[span.code [[0,1]]]. You can then deduce the 0th edge, and count the edges clockwise.

		p If your polygon has radial symmetry, you can specify the edge mapping by providing as input the interval between consecutive patterns, the starting edge, and the number of edges spanned by the pattern.

		.row
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-custom1-1(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label #[span.code interval = 3, span = 2].
				.label-container
					label This gives the mapping #[span.code [[0,2],[3,5],[6,8],[9,11]]]
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-custom1-2(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label #[span.code interval = 2, span = 3].
				.label-container
					label This gives the mapping #[span.code [[0,3],[2,5],[4,7],[6,9],[8,11],[10,1]]]
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-custom1-3(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label #[span.code interval = 1, span = 2].
				.label-container
					label This gives the mapping #[span.code [[0,2],[1,3],[2,4],[3,5],[4,6],[5,7], [6,8],[7,9],[8,10],[9,11],[10,0],[11,1]]]

		p You can also manually type in the array. If Sliceform Studio can't parse the text input into a list of pairs of integers, it will alert you of the error.

		p Sometimes you might want to impose mirror symmetry instead of rotational symmetry on the system. The pairs of integers in the edge mapping takes a 3rd implicit boolean argument, true/false, that indicate whether flip the pattern when copying it to that pair of edges. If omitted, the default is false.

		.row
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-custom_flip_1(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label #[span.code [[0,1],[3,2,true]]]
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-custom_flip_2(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label #[span.code [[1,5],[4,0,true],[6,0],[9,5,true]]]
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-custom_flip_3(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label #[span.code [[0,1],[2,1,true],[3,4],[5,4,true]]]

		h6 Offset

		p The offset sliders work the same as they do in the Hankin option. Offsets range from -0.5 to 0.5, with 0 representing that the pattern enters / exits the edge from its midpoint.

		h6 Symmetry

		p The three symmetry options determine how a template gets extended into a full pattern that spans two edges.

		ul
			li The default is "Mirror symmetry with cropping", where the template is built on both the start and end edge and joined in the middle by extending the two terminal rays till they complete. A template with #[i n] handles creates a pattern with #[i 2n] line segments.

			li Under "Mirror symmetry without cropping", the template is also built on both the start and end edge. Instead of extending the two terminal rays, Sliceform Studio builds an intermediate line segment to join the two terminal rays. A template with #[i n] handles creates a pattern with #[i 2n+1] line segments.

			li Under "No mirror symmetry", the template is only built on the start edge. A final line segment is built to join the final point on the template and the point on the end edge at the appropriate offset. A template with #[i n] handles creates a pattern with #[i n+1] line segments.

		.row
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-custom2-1(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label Mirror symmetry with cropping
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-custom2-2(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label Mirror symmetry without cropping
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-custom2-3(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label No mirror symmetry

		h6 Multiple patterns

		p The "Patterns" multiselect box allows you to superimpose multiple distinct patterns on the same tile. The "Add new pattern" button creates a new pattern; "Delete pattern" deletes the currently selected pattern. The currently active pattern is displayed with a red template while the inactive ones are displayed with a pink template. When you select an inactive template to make it active, all the parameters (degrees of freedom, the edge mapping, etc) automatically update to reflect the active pattern.

		.row
			.col-sm-4.col-sm-offset-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-custom3-1(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label Two patterns with different symmetries and edge mappings superimposed on the same tile

		h2#cropping Cropping

		.alert.alert-info This experimental feature is still in beta. To access it, click on the “Beta Features” button below the tile screen and turn on Pattern Cropping.

		p Sometimes, it is desirable for the final design to show just a fraction of the original tiling – for instance, if you want the result to be bounded by a rectangle. That is where the cropping feature comes in.

		.row
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-crop-1(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label 8-gons, 12-gons and bowtie fillers
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-crop-2(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label Defining a square crop area
			.col-sm-4.img-with-label
				.prop4col
					.content
						.responsive-sprites
							img.icon-crop-3(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label The cropped final result


		p Click on the #[i.fa.fa-crop.fa-border] Crop button in the toolbar. If “Crop mode” is turned on, your tiling is overlaid with multiple black “crop points” – one for every vertex, edge midpoint and polygon center of every tile.

		p You can click on crop points individually to select them (and unselect them again). The cropped area of the final design will be defined as the convex hull of the selected crop points. The “Select All” button selects every black "crop point" to be part of the convex hull; the “Reset” button unselects everything.

		p If fewer than 3 points are selected, the corresponding convex hull has no internal area and no cropping will be applied.

		h2#stripTrace Strip tracing

		p Select "Trace and export strips" at the top of the screen. Sliceform Studio automatically figures out how to trace patterns across the joined edges at the boundary of tiles and match them up. Your tiles has been converted into interlaced strips weaving through the design!

		h4#traceRules Tracing rules

		.alert.alert-info This section explains how Sliceform Studio traces the patterns to form strips under the hood. You can skip this if you're not interested in the theory.

		p When you specify a pattern, Sliceform Studio stores a record at each edge of the list of patterns incident at that edge. It calculates the offset of the pattern on the edge (with 0 representing the midpoint and -0.5 and +0.5 representing the two extremes) as well as the incident angle of the pattern on the edge.

		p When tracing is initiated, Sliceform Studio tries to match the pattern interfaces at a tile boundary, where two edges are joined together.

		p For each pattern #[i p] incident on an edge, the algorithm filters out the patterns from the other corresponding edge to those with edge offset compatible with #[i p]. If the filter is empty, the pattern is not matched*. If the filter returns a unique pattern, they are matched.

		p If there are multiple patterns originating from the same position, the algorithm picks the one with incident angle closest to that of #[i p]. It also checks that this is mutual, i.e. that #[i p] has incident angle closest to the other edge as well. If this is true, the two patterns are matched; otherwise, #[i p] is unmatched.

		p If no corresponding pattern is found on the other edge but there is a second pattern in the same tile as #[i p] incident on the edge at the same offset, Sliceform Studio matches both of them up such that the pattern “bounces” off the edge like a reflection.

		.row
			.col-sm-12.img-with-label
				.prop12col
					.content
						.responsive-sprites
							img.icon-matching(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label A summary of the matching procedure. Here two edges with incompatible pattern interfaces are being joined. Sliceform Studio matches up (a,b), (b,x), (c,w), (e,y) and (f,g). Patterns d and z are unmatched and their strips terminate at this edge.

		h4#color Color assignment

		p The strip canvas works similarly to the tile canvas – you can drag to pan and scroll to zoom. The same canvas control buttons exist on the bottom left corner of the canvas.

		p What's new is the color picker on top of the canvas. When you mouseover and click on a grey strip, it is assigned the color currently active in the color picker.

		p Colors serve two purposes. They can be entirely aesthetic and a way to create a visually appealing image for exporting. On the other hand, if you would like to create paper strips, colors serve as categories for strips that should be generated in the same SVG files. This allows you to group strips together to be printed or laser-cut or die-cut at one go.

		h4#displayParam Display parameters

		p The panel below the canvas allows you to specify various parameters about the display of your design.

		p The strip width slider controls the width of each strip. Note that strips may appear to pass through each other in tightly interlaced situations if the strip width is very high. This is a rendering artifact of the way Sliceform Studio displays interlaced strips.

		p The extension length slider controls the width of the line segment that is appended to the ends of strips. Note that this is only applicable to strips that terminate in an intersection; a non-zero extension length is required to generate paper strips so that they can properly slot into each other. If you are only generating the final image digitally for aesthetic reasons, you can freely set extension length to 0.

		p The Draw outline switch is purely aesthetic and does exactly as it says.

		p Under "Advanced Options" are multiple sliders that control further parameters for the generated SVG files.

		h2#export Exporting

		h4#exportImage Export image

		p If you are creating a design just for the digital output and not physical reconstruction, you can export the final result either as SVG (scalable vector graphics) or PNG (a more common rasterized format) via the #[i.fa.fa-download] SVG and #[i.fa.fa-download] PNG buttons.

		h4#exportStrip Export strips

		p Any strips you assigned colors are categorized and show up in the “Strip Generation” sidebar on the left of the canvas. You can click on the #[i.fa.fa-download.fa-border] button beside each color to download a SVG file corresponding to the strips assigned that color.

		p When you hover over a color category in the sidebar, the display highlights all strips of that color; all other strips fade temporarily to the default grey. You can also click on the #[i.fa.fa-caret-right] beside color categories to show a listing of all strips of that color. Hovering over a strip's label will highlight that strip in the display; reminding you which strip it is.

		p The Strip Generation sidebar is not just informational, but also provides an alternate way to edit the color assignments of strips. Click on the (#[i.fa.fa-times]) beside a strip label to unassign colors; the strip will fade back to neutral grey. You can also drag strip labels to another color category (equivalent to clicking on that strip to paint it another color), or drag to reorder strips within the same category (no difference aesthetically, but this affects the generated paper strip SVG output).

		p The generated SVG file features 3 colors – the slits in black, the creases in red and the outlines in blue. This is optimized for laser cutters and die cutters, where you can pick an order to cut each color and have a different speed / power setting for each color.

		h4#jsonStripGen JSON strip generation

		.alert.alert-info This experimental feature is still in beta. To access it, click on the “Beta Features” button below the tile screen and turn on JSON Strip Generation.

		p Some users have requested the use of Sliceform Studio's strip generation capabilities independent of the pattern generation or tracing features. If you have a particular sliceform in mind which you have already calculated the dimensions of each strip for, you can type in a JSON input under “Manual Strip Generation” to generate the corresponding strip.

		p The input format is an array of strips, where:
		ul
			li each strip is an array of segments (separated by creases),
			li each segment is an array of spaces (separated by slits),
			li each space is a number

		.row
			.col-sm-12.img-with-label
				.prop12col
					.content
						.responsive-sprites
							img.icon-sample_strip(src="/images/sprites/docs-sprite.jpg")
				.label-container
					label SVG corresponding to input: #[span.code [[[10,20,30,40],[10,20,30,40]],[[15,25,35,45],[45,35,25,15]]]]

		p See #[a(href="/gallery.html") Sunflower in the gallery] for an example of an artwork that used this feature.

		h4#loadSave Load and save

		p You can save your in-progress Sliceform Studio design as a .slfm file by clicking the #[i.fa.fa-floppy-o.fa-border] button in the toolbar or pressing the hotkey #[kbd s].

		p Existing .slfm files can be loaded by clicking the #[i.fa.fa-folder-open.fa-border] button in the toolbar.

		p If you want to start a new design, click the #[i.fa.fa-file-o.fa-border] button in the toolbar, or press the hotkey #[kbd n].

		footer
			!= partial("_partials/footer")